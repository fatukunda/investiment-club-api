{"version":3,"sources":["../../src/middleware/auth.js"],"names":["util","Util","auth","req","res","next","header","setError","send","token","replace","jwt","verify","process","env","JWT_KEY","err","decoded","name","User","findOne","_id","exec","user"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AAHA;AAKA,IAAMA,IAAI,GAAG,IAAIC,iBAAJ,EAAb,C,CACA;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACNF,GAAG,CAACG,MAAJ,CAAW,eAAX,CADM;AAAA;AAAA;AAAA;;AAETN,UAAAA,IAAI,CAACO,QAAL,CAAc,GAAd,EAAmB,mCAAnB;AAFS,4CAGFP,IAAI,CAACQ,IAAL,CAAUJ,GAAV,CAHE;;AAAA;AAKLK,UAAAA,KALK,GAKGN,GAAG,CAACG,MAAJ,CAAW,eAAX,EAA4BI,OAA5B,CAAoC,SAApC,EAA+C,EAA/C,CALH,EAMX;;AACAC,mCAAIC,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,OAA9B,EAAuC,iBAAOC,GAAP,EAAYC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACjCD,GAAG,KAAK,IAAR,IAAgBA,GAAG,CAACE,IAAJ,KAAa,mBADI;AAAA;AAAA;AAAA;;AAEnClB,oBAAAA,IAAI,CAACO,QAAL,CAAc,GAAd,EAAmB,+CAAnB;AAFmC,qDAG5BP,IAAI,CAACQ,IAAL,CAAUJ,GAAV,CAH4B;;AAAA;AAAA,0BAKjCY,GAAG,KAAK,IAAR,IAAgBA,GAAG,CAACE,IAAJ,KAAa,mBALI;AAAA;AAAA;AAAA;;AAMnClB,oBAAAA,IAAI,CAACO,QAAL,CAAc,GAAd,EAAmB,wBAAnB;AANmC,qDAO5BP,IAAI,CAACQ,IAAL,CAAUJ,GAAV,CAP4B;;AAAA;AAAA;AAAA,yDASlBe,iBAAKC,OAAL,CAAa;AAAEC,sBAAAA,GAAG,EAAEJ,OAAO,CAACI;AAAf,qBAAb,EAAmCC,IAAnC,EATkB;;AAAA;AAS/BC,oBAAAA,IAT+B;AAUrCpB,oBAAAA,GAAG,CAACoB,IAAJ,GAAWA,IAAX;AACAlB,oBAAAA,IAAI;;AAXiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvC;;AAPW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb;;eAsBeH,I","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport jwt from 'jsonwebtoken';\nimport User from '../modules/user-management/User';\nimport Util from '../utils/utils';\n\nconst util = new Util();\n// eslint-disable-next-line consistent-return\nconst auth = async (req, res, next) => {\n  if (!req.header('Authorization')) {\n    util.setError(401, 'Authorization header is required.');\n    return util.send(res);\n  }\n  const token = req.header('Authorization').replace('Bearer ', '');\n  // eslint-disable-next-line consistent-return\n  jwt.verify(token, process.env.JWT_KEY, async (err, decoded) => {\n    if (err !== null && err.name === 'TokenExpiredError') {\n      util.setError(401, 'Your session has expired. Please login again!');\n      return util.send(res);\n    }\n    if (err !== null && err.name === 'JsonWebTokenError') {\n      util.setError(401, 'Authentication failed.');\n      return util.send(res);\n    }\n    const user = await User.findOne({ _id: decoded._id }).exec();\n    req.user = user;\n    next();\n  });\n};\n\nexport default auth;\n"],"file":"auth.js"}