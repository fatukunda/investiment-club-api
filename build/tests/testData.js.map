{"version":3,"sources":["../../src/tests/testData.js"],"names":["_id","mongoose","Types","ObjectId","validUser","username","email","password","existingUserName","noUsernameUser","noPasswordUser","noEmailUser","invalidEmailUser","shortPasswordUser","user1","user2","createUsers","User","deleteMany","create","generateToken","token","jwt","sign","process","env","JWT_KEY","expiresIn","invalidToken"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA,IAAMA,GAAG,GAAGC,qBAASC,KAAT,CAAeC,QAAf,EAAZ,C,CACA;;;AACO,IAAMC,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAE,UADa;AAEvBC,EAAAA,KAAK,EAAE,kBAFgB;AAGvBC,EAAAA,QAAQ,EAAE;AAHa,CAAlB;;AAMA,IAAMC,gBAAgB,GAAG;AAC9BH,EAAAA,QAAQ,EAAE,UADoB;AAE9BC,EAAAA,KAAK,EAAE,mBAFuB;AAG9BC,EAAAA,QAAQ,EAAE;AAHoB,CAAzB,C,CAMP;;;AAEO,IAAME,cAAc,GAAG;AAC5BH,EAAAA,KAAK,EAAE,kBADqB;AAE5BC,EAAAA,QAAQ,EAAE;AAFkB,CAAvB,C,CAKP;;;AAEO,IAAMG,cAAc,GAAG;AAC5BL,EAAAA,QAAQ,EAAE,UADkB;AAE5BC,EAAAA,KAAK,EAAE;AAFqB,CAAvB,C,CAKP;;;AAEO,IAAMK,WAAW,GAAG;AACzBN,EAAAA,QAAQ,EAAE,UADe;AAEzBE,EAAAA,QAAQ,EAAE;AAFe,CAApB,C,CAKP;;;AAEO,IAAMK,gBAAgB,GAAG;AAC9BP,EAAAA,QAAQ,EAAE,UADoB;AAE9BC,EAAAA,KAAK,EAAE,iBAFuB;AAG9BC,EAAAA,QAAQ,EAAE;AAHoB,CAAzB,C,CAMP;;;AAEO,IAAMM,iBAAiB,GAAG;AAC/BR,EAAAA,QAAQ,EAAE,UADqB;AAE/BC,EAAAA,KAAK,EAAE,kBAFwB;AAG/BC,EAAAA,QAAQ,EAAE;AAHqB,CAA1B,C,CAMP;;;AACO,IAAMO,KAAK,GAAG;AACnBd,EAAAA,GAAG,EAAHA,GADmB;AAEnBK,EAAAA,QAAQ,EAAE,OAFS;AAGnBC,EAAAA,KAAK,EAAE,eAHY;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAAd;;AAMP,IAAMQ,KAAK,GAAG;AACZV,EAAAA,QAAQ,EAAE,OADE;AAEZC,EAAAA,KAAK,EAAE,eAFK;AAGZC,EAAAA,QAAQ,EAAE;AAHE,CAAd,C,CAKA;;AAEO,IAAMS,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACnBC,iBAAKC,UAAL,EADmB;;AAAA;AAAA;AAAA,+CAEnBD,iBAAKE,MAAL,CAAYL,KAAZ,CAFmB;;AAAA;AAAA;AAAA,+CAGnBG,iBAAKE,MAAL,CAAYJ,KAAZ,CAHmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;;;AAMA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,MAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEvB,IAAAA,GAAG,EAAHA;AAAF,GAAT,EAAkBwB,OAAO,CAACC,GAAR,CAAYC,OAA9B,EAAuC;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAvC,CAAd;;AACA,SAAON,KAAP;AACD,CAHM;;;AAKA,IAAMO,YAAY,GAAG,8KAArB","sourcesContent":["import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport User from '../modules/user-management/User';\n\n// eslint-disable-next-line no-underscore-dangle\nconst _id = mongoose.Types.ObjectId();\n// Valid User\nexport const validUser = {\n  username: 'testUser',\n  email: 'testuser@app.com',\n  password: 'test12!@',\n};\n\nexport const existingUserName = {\n  username: 'testUser',\n  email: 'testuser1@app.com',\n  password: 'test12!@',\n};\n\n// User with no username\n\nexport const noUsernameUser = {\n  email: 'testuser@app.com',\n  password: 'test12!@',\n};\n\n// User with no password\n\nexport const noPasswordUser = {\n  username: 'testUser',\n  email: 'testuser@app.com',\n};\n\n// User with no email\n\nexport const noEmailUser = {\n  username: 'testUser',\n  password: 'test12!@',\n};\n\n// User with invalid email\n\nexport const invalidEmailUser = {\n  username: 'testUser',\n  email: 'testuserapp.com',\n  password: 'test12!@',\n};\n\n// User with a short password\n\nexport const shortPasswordUser = {\n  username: 'testUser',\n  email: 'testuser@app.com',\n  password: 'test',\n};\n\n// Sample users\nexport const user1 = {\n  _id,\n  username: 'user1',\n  email: 'user1@app.com',\n  password: 'testuser1!@',\n};\nconst user2 = {\n  username: 'user2',\n  email: 'user2@app.com',\n  password: 'testuser2!@',\n};\n// Function to create users for each test\n\nexport const createUsers = async () => {\n  await User.deleteMany();\n  await User.create(user1);\n  await User.create(user2);\n};\n\nexport const generateToken = () => {\n  const token = jwt.sign({ _id }, process.env.JWT_KEY, { expiresIn: '1h' });\n  return token;\n};\n\nexport const invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZGY5Y2NmODM3MDFhODUwOGM2NzZhZGYiLCJpYXQiOjE1NzY2NTg1NTcsImV4cCI6MTU3NjY2MjE1N30.Wz6xtyN9B6gXr_Y2VgbWUVOZrAljoy4V2ewhZrWXSUB';\n"],"file":"testData.js"}