{"version":3,"sources":["../../src/tests/userModule.test.js"],"names":["usersUrl","chai","use","chaiHttp","expect","createUsers","describe","it","done","username","validUser","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","user","include","noEmailUser","message","noPasswordUser","noUsernameUser","invalidEmailUser","shortPasswordUser"],"mappings":";;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAPA;AAiBA,IAAMA,QAAQ,GAAG,eAAjB;;AAEAC,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAWH,gB,CAAXG,M;AAER,uBAAWC,qBAAX;AAEAC,QAAQ,CAAC,oCAAD,EAAuC,YAAM;AACnDC,EAAAA,EAAE,CAAC,0BAAD,EAA6B,UAACC,IAAD,EAAU;AAAA,QAC/BC,QAD+B,GACXC,mBADW,CAC/BD,QAD+B;AAAA,QACrBE,KADqB,GACXD,mBADW,CACrBC,KADqB;;AAEvCV,qBAAKW,OAAL,CAAaC,eAAb,EAAkBC,IAAlB,CAAuBd,QAAvB,EAAiCe,GAAjC,CAAqC,QAArC,EAA+C,kBAA/C,EAAmEC,IAAnE,CAAwEN,mBAAxE,EACGO,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAcC,IAAf,CAAN,CAA2BJ,EAA3B,CAA8BK,OAA9B,CAAsC;AAAEjB,QAAAA,QAAQ,EAARA,QAAF;AAAYE,QAAAA,KAAK,EAALA;AAAZ,OAAtC;AACAH,MAAAA,IAAI;AACL,KALH;AAMD,GARC,CAAF;AAUAD,EAAAA,EAAE,CAAC,6CAAD,EAAgD,UAACC,IAAD,EAAU;AAC1DP,qBAAKW,OAAL,CAAaC,eAAb,EAAkBC,IAAlB,CAAuBd,QAAvB,EAAiCe,GAAjC,CAAqC,QAArC,EAA+C,kBAA/C,EAAmEC,IAAnE,CAAwEW,qBAAxE,EACGV,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASK,OAAV,CAAN,CAAyBP,EAAzB,CAA4BC,KAA5B,CAAkC,oBAAlC;AACAd,MAAAA,IAAI;AACL,KALH;AAMD,GAPC,CAAF;AASAD,EAAAA,EAAE,CAAC,gDAAD,EAAmD,UAACC,IAAD,EAAU;AAC7DP,qBAAKW,OAAL,CAAaC,eAAb,EAAkBC,IAAlB,CAAuBd,QAAvB,EAAiCe,GAAjC,CAAqC,QAArC,EAA+C,kBAA/C,EAAmEC,IAAnE,CAAwEa,wBAAxE,EACGZ,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASK,OAAV,CAAN,CAAyBP,EAAzB,CAA4BC,KAA5B,CAAkC,uBAAlC;AACAd,MAAAA,IAAI;AACL,KALH;AAMD,GAPC,CAAF;AASAD,EAAAA,EAAE,CAAC,gDAAD,EAAmD,UAACC,IAAD,EAAU;AAC7DP,qBAAKW,OAAL,CAAaC,eAAb,EAAkBC,IAAlB,CAAuBd,QAAvB,EAAiCe,GAAjC,CAAqC,QAArC,EAA+C,kBAA/C,EAAmEC,IAAnE,CAAwEc,wBAAxE,EACGb,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASK,OAAV,CAAN,CAAyBP,EAAzB,CAA4BC,KAA5B,CAAkC,uBAAlC;AACAd,MAAAA,IAAI;AACL,KALH;AAMD,GAPC,CAAF;AASAD,EAAAA,EAAE,CAAC,0CAAD,EAA6C,UAACC,IAAD,EAAU;AACvDP,qBAAKW,OAAL,CAAaC,eAAb,EAAkBC,IAAlB,CAAuBd,QAAvB,EAAiCe,GAAjC,CAAqC,QAArC,EAA+C,kBAA/C,EAAmEC,IAAnE,CAAwEe,0BAAxE,EACGd,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASK,OAAV,CAAN,CAAyBP,EAAzB,CAA4BC,KAA5B,WAAqCS,2BAAiBpB,KAAtD;AACAH,MAAAA,IAAI;AACL,KALH;AAMD,GAPC,CAAF;AASAD,EAAAA,EAAE,CAAC,6CAAD,EAAgD,UAACC,IAAD,EAAU;AAC1DP,qBAAKW,OAAL,CAAaC,eAAb,EAAkBC,IAAlB,CAAuBd,QAAvB,EAAiCe,GAAjC,CAAqC,QAArC,EAA+C,kBAA/C,EAAmEC,IAAnE,CAAwEgB,2BAAxE,EACGf,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASK,OAAV,CAAN,CAAyBP,EAAzB,CAA4BC,KAA5B,CAAkC,8CAAlC;AACAd,MAAAA,IAAI;AACL,KALH;AAMD,GAPC,CAAF;AAQD,CAvDO,CAAR","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport 'chai/register-should';\nimport { beforeEach } from 'mocha';\nimport app from '../app';\n\nimport {\n  validUser,\n  noEmailUser,\n  noPasswordUser,\n  noUsernameUser,\n  invalidEmailUser,\n  shortPasswordUser,\n  createUsers,\n} from './testData';\n\nconst usersUrl = '/api/v1/users';\n\nchai.use(chaiHttp);\nconst { expect } = chai;\n\nbeforeEach(createUsers);\n\ndescribe('Testing the User management module', () => {\n  it('Should create a new user', (done) => {\n    const { username, email } = validUser;\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(validUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.data.user).to.include({ username, email });\n        done();\n      });\n  });\n\n  it('Should throw a 400 if email is not provided', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(noEmailUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Email is required.');\n        done();\n      });\n  });\n\n  it('Should throw a 400 if password is not provided', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(noPasswordUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Password is required.');\n        done();\n      });\n  });\n\n  it('Should throw a 400 if username is not provided', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(noUsernameUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Username is required.');\n        done();\n      });\n  });\n\n  it('Should throw a 400 if email is not valid', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(invalidEmailUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal(`${invalidEmailUser.email} is not a valid email.`);\n        done();\n      });\n  });\n\n  it('Should throw a 400 if password is too short', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(shortPasswordUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Password should have more than 6 characters.');\n        done();\n      });\n  });\n});\n"],"file":"userModule.test.js"}