{"version":3,"sources":["../../src/tests/userModule.test.js"],"names":["usersUrl","chai","use","chaiHttp","expect","createUsers","describe","it","done","username","validUser","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","user","include","user1","noEmailUser","message","noPasswordUser","noUsernameUser","invalidEmailUser","shortPasswordUser","password","loginInfo"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport 'chai/register-should';\nimport { beforeEach } from 'mocha';\nimport app from '../app';\n\nimport {\n  validUser,\n  noEmailUser,\n  noPasswordUser,\n  noUsernameUser,\n  invalidEmailUser,\n  shortPasswordUser,\n  createUsers,\n  user1,\n} from './testData';\n\nconst usersUrl = '/api/v1/users';\n\nchai.use(chaiHttp);\nconst { expect } = chai;\n\nbeforeEach(createUsers);\n\ndescribe('Testing the User management module', () => {\n  it('Should create a new user', (done) => {\n    const { username, email } = validUser;\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(validUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.data.user).to.include({ username, email });\n        done();\n      });\n  });\n\n  it('Should throw a 400 if a username already exists', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(user1)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        done();\n      });\n  });\n\n  it('Should throw a 400 if email is not provided', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(noEmailUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Email is required.');\n        done();\n      });\n  });\n\n  it('Should throw a 400 if password is not provided', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(noPasswordUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Password is required.');\n        done();\n      });\n  });\n\n  it('Should throw a 400 if username is not provided', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(noUsernameUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Username is required.');\n        done();\n      });\n  });\n\n  it('Should throw a 400 if email is not valid', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(invalidEmailUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal(`${invalidEmailUser.email} is not a valid email.`);\n        done();\n      });\n  });\n\n  it('Should throw a 400 if password is too short', (done) => {\n    chai.request(app).post(usersUrl).set('Accept', 'application/json').send(shortPasswordUser)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body.message).to.equal('Password should have more than 6 characters.');\n        done();\n      });\n  });\n\n  it('Should login a user', (done) => {\n    const { username, password, email } = user1;\n    const loginInfo = {\n      username,\n      password,\n    };\n    chai.request(app).post(`${usersUrl}/login`).set('Accept', 'application/json').send(loginInfo)\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data.user).to.include({ username, email });\n        done();\n      });\n  });\n\n  it('Should throw a 400 if invalid username is provided', (done) => {\n    const { password } = user1;\n    const loginInfo = {\n      username: 'nouser',\n      password,\n    };\n    chai.request(app).post(`${usersUrl}/login`).set('Accept', 'application/json').send(loginInfo)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body).to.include({ status: 'error', message: 'Invalid login credentials.' });\n        done();\n      });\n  });\n\n  it('Should throw a 400 if invalid password is provided', (done) => {\n    const { username } = user1;\n    const loginInfo = {\n      username,\n      password: 'wrongPass12',\n    };\n    chai.request(app).post(`${usersUrl}/login`).set('Accept', 'application/json').send(loginInfo)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body).to.include({ status: 'error', message: 'Invalid login credentials.' });\n        done();\n      });\n  });\n});\n"],"file":"userModule.test.js"}