{"version":3,"sources":["../../src/utils/validator.js"],"names":["profileValidator","error","errorMessage","errors","firstName","message","lastName","dob","gender","phoneNumber","userRegistrationValidator","email","kind","password","username"],"mappings":";;;;;;;AAAA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClC,MAAIC,YAAY,GAAG,EAAnB;;AACA,MAAID,KAAK,CAACE,MAAN,CAAaC,SAAjB,EAA4B;AAC1BF,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,OAAtC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaG,QAAjB,EAA2B;AACzBJ,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBD,OAArC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaI,GAAjB,EAAsB;AACpBL,IAAAA,YAAY,GAAG,sBAAf;AACD;;AACD,MAAID,KAAK,CAACE,MAAN,CAAaK,MAAjB,EAAyB;AACvBN,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaK,MAAb,CAAoBH,OAAnC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaM,WAAjB,EAA8B;AAC5BP,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaM,WAAb,CAAyBJ,OAAxC;AACD;;AACD,SAAOH,YAAP;AACD,CAlBD;;;;AAoBA,IAAMQ,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACT,KAAD,EAAW;AAC3C,MAAIC,YAAY,GAAG,EAAnB;;AACA,MAAID,KAAK,CAACE,MAAN,CAAaQ,KAAjB,EAAwB;AACtBT,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaQ,KAAb,CAAmBN,OAAlC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaQ,KAAb,IAAsBV,KAAK,CAACE,MAAN,CAAaQ,KAAb,CAAmBC,IAAnB,KAA4B,QAAtD,EAAgE;AAC9DV,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaQ,KAAb,CAAmBN,OAAlC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaQ,KAAb,IAAsBV,KAAK,CAACE,MAAN,CAAaQ,KAAb,CAAmBC,IAAnB,KAA4B,UAAtD,EAAkE;AAChEV,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaQ,KAAb,CAAmBN,OAAlC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaU,QAAjB,EAA2B;AACzBX,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaU,QAAb,CAAsBR,OAArC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaW,QAAb,IAAyBb,KAAK,CAACE,MAAN,CAAaW,QAAb,CAAsBF,IAAtB,KAA+B,QAA5D,EAAsE;AACpEV,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaW,QAAb,CAAsBT,OAArC;AACD;;AACD,MAAIJ,KAAK,CAACE,MAAN,CAAaW,QAAb,IAAyBb,KAAK,CAACE,MAAN,CAAaW,QAAb,CAAsBF,IAAtB,KAA+B,UAA5D,EAAwE;AACtEV,IAAAA,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaW,QAAb,CAAsBT,OAArC;AACD;;AAED,SAAOH,YAAP;AACD,CAtBD","sourcesContent":["const profileValidator = (error) => {\n  let errorMessage = '';\n  if (error.errors.firstName) {\n    errorMessage = error.errors.firstName.message;\n  }\n  if (error.errors.lastName) {\n    errorMessage = error.errors.lastName.message;\n  }\n  if (error.errors.dob) {\n    errorMessage = 'Invalid date format.';\n  }\n  if (error.errors.gender) {\n    errorMessage = error.errors.gender.message;\n  }\n  if (error.errors.phoneNumber) {\n    errorMessage = error.errors.phoneNumber.message;\n  }\n  return errorMessage;\n};\n\nconst userRegistrationValidator = (error) => {\n  let errorMessage = '';\n  if (error.errors.email) {\n    errorMessage = error.errors.email.message;\n  }\n  if (error.errors.email && error.errors.email.kind === 'unique') {\n    errorMessage = error.errors.email.message;\n  }\n  if (error.errors.email && error.errors.email.kind === 'required') {\n    errorMessage = error.errors.email.message;\n  }\n  if (error.errors.password) {\n    errorMessage = error.errors.password.message;\n  }\n  if (error.errors.username && error.errors.username.kind === 'unique') {\n    errorMessage = error.errors.username.message;\n  }\n  if (error.errors.username && error.errors.username.kind === 'required') {\n    errorMessage = error.errors.username.message;\n  }\n\n  return errorMessage;\n};\nexport { profileValidator, userRegistrationValidator };\n"],"file":"validator.js"}