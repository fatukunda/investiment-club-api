{"version":3,"sources":["../../../src/modules/user-management/User.js"],"names":["userSchema","mongoose","Schema","email","type","String","validate","validator","isEmail","message","isAsync","required","unique","trim","username","password","minlength","firstName","isAlpha","lastName","dob","Date","phoneNumber","isMobilePhone","locale","options","strictMode","address","gender","plugin","uniqueValidator","pre","next","user","isModified","bcrypt","hash","methods","generateAuthToken","token","jwt","sign","_id","process","env","JWT_KEY","expiresIn","save","statics","findByCredentials","User","findOne","exec","error","compare","isPasswordMatch","toJSON","userObject","toObject","model"],"mappings":"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","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable no-underscore-dangle */\nimport mongoose from 'mongoose';\nimport { isEmail, isAlpha, isMobilePhone } from 'validator';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport uniqueValidator from 'mongoose-unique-validator';\n\nconst userSchema = mongoose.Schema({\n  email: {\n    type: String,\n    validate: {\n      validator: isEmail,\n      message: '{VALUE} is not a valid email.',\n      isAsync: false,\n    },\n    required: [true, 'Email is required.'],\n    unique: true,\n    trim: true,\n  },\n  username: {\n    type: String,\n    required: [true, 'Username is required.'],\n    unique: true,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: [true, 'Password is required.'],\n    minlength: [6, 'Password should have more than 6 characters.'],\n    trim: true,\n  },\n\n  firstName: {\n    type: String,\n    required: false,\n    trim: true,\n    validate: {\n      validator: isAlpha,\n      message: '{PATH} should contain only letters.',\n      isAsync: false,\n    },\n  },\n  lastName: {\n    type: String,\n    trim: true,\n    validate: {\n      validator: isAlpha,\n      message: '{PATH} should contain only letters.',\n      isAsync: false,\n    },\n  },\n  dob: {\n    type: Date,\n  },\n  phoneNumber: {\n    type: String,\n    validate: {\n      validator: isMobilePhone,\n      message: '{VALUE} is not a valid phone number.',\n      isAsync: false,\n      locale: 'en-UG',\n      options: {\n        strictMode: true,\n      },\n    },\n  },\n  address: {\n    type: String,\n  },\n  gender: {\n    type: String,\n    enum: ['male', 'female'],\n  },\n\n});\n\nuserSchema.plugin(uniqueValidator, { message: 'A user with {PATH} {VALUE} already exists.' });\n\nuserSchema.pre('save', async function (next) {\n  // Hash the password before saving the user model\n  const user = this;\n  if (user.isModified('password')) {\n    user.password = await bcrypt.hash(user.password, 8);\n  }\n  next();\n});\n\nuserSchema.methods.generateAuthToken = async function () {\n  // Generate an auth token for the user\n  const user = this;\n  const token = jwt.sign({ _id: user._id }, process.env.JWT_KEY, { expiresIn: '1h' });\n  await user.save();\n  return token;\n};\n\nuserSchema.statics.findByCredentials = async (username, password) => {\n  // Search for a user by email and password\n  // eslint-disable-next-line no-use-before-define\n  const user = await User.findOne({ username }).exec();\n  if (!user) {\n    return { error: 'Invalid login credentials.' };\n  }\n  const isPasswordMatch = await bcrypt.compare(password, user.password);\n  if (!isPasswordMatch) {\n    return { error: 'Invalid login credentials.' };\n  }\n  return user;\n};\n\nuserSchema.methods.toJSON = function () {\n  // Remove some sensitive properties from the user response\n  const user = this;\n  const userObject = user.toObject();\n  delete userObject.password;\n\n  return userObject;\n};\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;\n"],"file":"User.js"}